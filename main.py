
# This is Main (Public) file

# Main liblaries
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import ReplyKeyboardMarkup
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

import sqlite3
import logging

# Config Data
from config import *

# Media files (cloud import)
# Datas files
from clouds import *
from address import *

# This is Bot's Basic Settings !
API_TOKEN = Bot(token = BOT_TOKEN, parse_mode="HTML")
bot = Dispatcher(API_TOKEN)
botName = str("Hi Germany Bot")

from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build


# Database


# Import SQLAlchemy and create an engine
from sqlalchemy import create_engine, Column, Integer, String, Boolean
from sqlalchemy.orm import sessionmaker
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import declarative_base
from sqlalchemy.orm import sessionmaker

# Define the database URL. Replace 'sqlite:///mydatabase.db' with your SQLite database path.
DATABASE_URL = 'sqlite:///users.db'

# Create an engine and session
engine = create_engine(DATABASE_URL)
Session = sessionmaker(bind=engine)
session = Session()

# Create a base class for declarative models
Base = declarative_base()

class User(Base):
    __tablename__ = 'users'

    id = Column(Integer, primary_key=True, autoincrement=True)
    user_id = Column(Integer, unique=True)
    username = Column(String(255))
    firstname = Column(String(255))
    first_interaction = Column(Boolean, default=True)
    selected_language = Column(String(2), default="uz")  # Add a column for selected language

# Create the users table if it doesn't exist
Base.metadata.create_all(engine)


# Users request, (helps)
conn = sqlite3.connect('messages.db')
cursor = conn.cursor()

cursor.execute('''CREATE TABLE IF NOT EXISTS messages (
                  id INTEGER PRIMARY KEY AUTOINCREMENT,
                  user_id INTEGER,
                  message_text TEXT
                )''')
conn.commit()

# Admins request, (important with (admins))
conn_admins = sqlite3.connect('admins.db')
cursor_admins = conn_admins.cursor()

cursor_admins.execute('''CREATE TABLE IF NOT EXISTS admins (
                  id INTEGER PRIMARY KEY AUTOINCREMENT,
                  user_id INTEGER,
                  admin_id INTEGER
                )''')
conn_admins.commit()


try:
    # This is Main Buttons
    couBut = InlineKeyboardButton(text="üìö Kurslar (new)")
    useBut = InlineKeyboardButton(text="üíé Foydali Ma'lumotlar (new)")
    AscBut = InlineKeyboardButton(text="‚òéÔ∏è Bog'lanish")
    aboutBut = InlineKeyboardButton(text="üìú Biz haqimizda")
    messABut = InlineKeyboardButton(text="üë®‚Äçüíª Yordam | Habar yozish")
    setBut= InlineKeyboardButton(text="‚öôÔ∏è Sozlamalar (set)")
    keyboard_inline = InlineKeyboardMarkup().add(couBut, useBut, AscBut, aboutBut, messABut, setBut)

    keyboards = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=2).add(couBut,
                                    useBut, AscBut, aboutBut, messABut, setBut)
    
    couBut_ru = InlineKeyboardButton(text="üìö –ö—É—Ä—Å—ã (–Ω–æ–≤—ã–µ)")
    useBut_ru = InlineKeyboardButton(text="üíé –ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (new)")
    AscBut_ru = InlineKeyboardButton(text="‚òéÔ∏è –°–≤—è–∑—å")
    aboutBut_ru = InlineKeyboardButton(text="üìú –û –Ω–∞—Å")
    messABut = InlineKeyboardButton(text="üë®‚Äçüíª –ü–æ–º–æ—â—å | –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
    setBut_ru = InlineKeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (set)")
    keyboard_inline_ru = InlineKeyboardMarkup().add(couBut_ru,
                                            useBut_ru, AscBut_ru, aboutBut_ru, messABut, setBut_ru)

    keyboards_ru = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=2).add(couBut_ru,
                                            useBut_ru, AscBut_ru, aboutBut_ru, messABut, setBut_ru)
    
    # Select language
    
    def selectsLanguages():
        keyboard = types.InlineKeyboardMarkup()
        btn_uz = types.InlineKeyboardButton("üá∫üáø O'zbek", callback_data='uz')
        btn_ru = types.InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data='ru')
        keyboard.add(btn_uz, btn_ru)

        return keyboard
    
    def getUserLanguage(user_id):
        user = session.query(User).filter_by(user_id=user_id).first()
        if user:
            return user.selected_language
        return None


    # This is "Follov" channel buttons function
    def followChannel():
        channel = InlineKeyboardButton(
            text="‚û°Ô∏è Obuna Bo'lish (–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è)",
            url=CHANNEL_URLS
        )
        check_follow = InlineKeyboardButton(
            text="‚úÖ Tekshirish (–ø—Ä–æ–≤–µ—Ä—è—Ç—å)",
            callback_data="subdone"
        )
        chAllBtn = InlineKeyboardMarkup(row_width=1).add(channel, check_follow)

        return chAllBtn


    @bot.message_handler(commands=['start', 'hello', 'hi', 'restart'])
    async def welcome(message: types.Message):
        # Users Data

        # Check if the user is already in the database
        user = session.query(User).filter_by(user_id=message.from_user.id).first()

        if not user:
            # User is interacting for the first time, save their data
            user = User(
                user_id=message.from_user.id,
                username=message.from_user.username,
                firstname=message.from_user.first_name
            )
            session.add(user)
            session.commit()
    
        user_id = message.from_user.id
        user = session.query(User).filter_by(user_id=user_id).first()
        
        # Check System follow
        checkSubChan = await API_TOKEN.get_chat_member(chat_id=CHANNEL_ID, user_id=message.from_user.id)

        userName = str(message.chat.first_name)
        welToUz = f"<b>‚úã <em>{ userName }</em>, <em>{ botName }</em> - ga xush kelibsiz.</b>"
        welToRu = f"<b>‚úã <em>{ userName }</em>, <em>{ botName }</em> - –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç.</b>"
        user_id = message.from_user.id


        if checkSubChan['status'] != 'left':
            if user.selected_language == "uz":
                await message.answer(welToUz)
            elif user.selected_language == "ru":
                await message.answer(welToRu)
            if not user:
                if user.selected_language == "uz":
                    await message.answer(welToUz)
                elif user.selected_language == "ru":
                    await message.answer(welToRu)

                await message.answer(
                    text=f"<b><em>{ userName }, Tilni tanlang / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫</em></b>",
                    reply_markup=selectsLanguages()
                )
            else:
                if user.selected_language == "uz":
                    await message.answer(
                        text="<b><em>Menuni tanlang: </em></b>",
                        reply_markup=keyboards,
                    )
                elif user.selected_language == "ru":
                    await message.answer(
                        text="<b><em>–í—ã–±–µ—Ä–∏—Ç–µ –º–µ–Ω—é: </em></b>",
                        reply_markup=keyboards_ru,
                    )
            
        else:
            await message.answer(
                text = f"<b>‚úã <em>{ userName }, { botName } ga xush kelibsiz. \n(–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç.)</em> \n\n‚ùóÔ∏è <em>{ userName }</em>, Botdan foydalanish uchun Kanalimizga obuna bo'ling. \n(–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø–æ—Å–µ—Ç–∏—Ç—å –±–æ—Ç–∞.)</b>",
                reply_markup=followChannel()
            )

            
    @bot.callback_query_handler(lambda checkSub: checkSub.data=="subdone")
    async def checkSubMes(callback: types.CallbackQuery):
        checkSubChan = await API_TOKEN.get_chat_member(chat_id=CHANNEL_ID, user_id=callback.from_user.id)
        userName = str(callback.message.chat.first_name)

        if callback.data == "subdone":
            if checkSubChan['status'] != 'left':
                await callback.message.answer(
                    text = f"<b>üéâ <em>{ userName }</em>, Tabriklaymiz endi botimizdan to'liq foydalanishingiz mumkin. \n\n(–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, —Ç–µ–ø–µ—Ä—å –Ω–∞—à –±–æ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –µ–≥–æ.)</b>",
                    # reply_markup=keyboards
                )
                await callback.message.answer(
                    text=f"<b><em>Tilni tanlang / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫</em></b>",
                    reply_markup=selectsLanguages()
                )
            else:
                await callback.message.answer(
                    text = f"<b>‚ùå <em>{ userName }</em>, hali kanalimizga obuna bo'lmadingiz. \n\n(–í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª.)</b>",
                    reply_markup=followChannel()
                )



    @bot.callback_query_handler(lambda c: c.data in ['uz', 'ru'])
    async def process_callback(callback_query: types.CallbackQuery):
        selected_language = callback_query.data
        user_id = callback_query.from_user.id
        user = session.query(User).filter_by(user_id=user_id).first()

        if user:
            user.selected_language = selected_language
        else:
            new_user = User(user_id=user_id, selected_language=selected_language)
            session.add(new_user)

        session.commit()
        
        logging.info(f"Foydalanuvchi (ID: {user_id}) tanlagan til: { selected_language }")
        
        try:
            if selected_language == 'uz':
                await bot.bot.send_message(
                    user_id,
                    text=f"<b>üá∫üáø Siz <em>O'zbek</em> tilini tanladingiz</b>",
                    reply_markup=keyboards,
                )
            elif selected_language == 'ru':
                await bot.bot.send_message(
                    user_id,
                    text=f"<b>üá∑üá∫ –í—ã –≤—ã–±—Ä–∞–ª–∏ <em>–†—É—Å—Å–∫–∏–π</em></b>",
                    reply_markup=keyboards_ru,
                )
        except Exception as e:
            logging.error(f"Xatolik: {e}")
            
            await bot.bot.send_message(user_id, text=f"Siz { selected_language } tilini tanladingiz. Xatolik sodir bo'ldi va xabar yetkazilmadi.")

    
    @bot.message_handler(text="üîÑ Tilni o'zgartirish / –ò–∑–º–µ–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞")
    async def settings(message: types.Message):
        user_id = message.from_user.id
        user = session.query(User).filter_by(user_id=user_id).first()
        
        if user:
            await message.answer("<b>üîÅ Tilni o'zgartirish / –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫</b>", reply_markup=selectsLanguages())
        else:
            # Foydalanuvchi hali tanlagan tili yo'q
            await message.answer("ü•∫ Iltimos, birorta til tanlang / –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫.")


    @bot.message_handler(lambda message: message.text in ["üë®‚Äçüíª Yordam | Habar yozish", "üë®‚Äçüíª –ü–æ–º–æ—â—å | –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"])
    async def helpMess(message: types.Message):
        userData = message.from_user.first_name
        user_id = message.from_user.id
        user = session.query(User).filter_by(user_id=user_id).first() 
        messagetext = f"<b>üë®‚Äçüíª <em>Yordam</em> yoki <em>Habar yozish</em></b> \n\n{ userData }, <em>siz bu bo'lim orqali, Biznig xodimlarimizga bot yuzasizdan qandaydir #Xatoliklar, #Tushunmovchiliklar yoki Qandaydir #Yodam yuzasidan murojaat qilishingiz mumkun.</em> \n\n<b><em>Biz imkon qadar murojatingiznchi o'qib haq qilishg harakat qilamiz !</em></b>"
        reMessageF = f"<b>üí¨ Murojaat qilish tartibi!</b> \n\n/mail Assalomu Aleykum. Menga shu masala bo'yicha yordam bera olasizmi. Bla bla bla... \nTelefon #raqam Yoki Telegram #username \n\n<b>P.S. Murojatingiz boshida <em>/mail</em> yozishni unutmang aks holsa so ªrovingizni xodimlarimiz javobsiz qoldirishi mumkun ‚ùóÔ∏è</b>"

        messagetextRu = f"<b>üë®‚Äçüíª <em>–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–º–æ—â—å –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ</em></b> \n\n{ userData }, <em>–ß–µ—Ä–µ–∑ —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–∏–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏ –ø–æ –ø–æ–≤–æ–¥—É –ª—é–±—ã—Ö #–û—à–∏–±–æ–∫, #–ù–µ–¥–æ–ø–æ–Ω–∏–º–∞–Ω–∏–π –∏–ª–∏ #–í–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π.</em> \n\n<b><em>–ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –í–∞—à –∑–∞–ø—Ä–æ—Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ !</em></b>"
        reMessageFRu = f"<b>üí¨–ü–æ—Ä—è–¥–æ–∫ –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏!</b> \n\n/mail –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –ú–æ–∂–µ—Ç–µ –ª–∏ –≤—ã –¥–∞—Ç—å –º–Ω–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–µ—Ç–æ–≤ –ø–æ —ç—Ç–æ–º—É –ø–æ–≤–æ–¥—É? –ë–ª–∞ –±–ª–∞ –±–ª–∞... \n#–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ Telegram #–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \n\n<b>P.S. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å <em>/mail</em> –≤ –Ω–∞—á–∞–ª–µ –∑–∞—è–≤–∫–∏, –∏–Ω–∞—á–µ –Ω–∞—à–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ –º–æ–≥—É—Ç –æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞—à –≤–æ–ø—Ä–æ—Å –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ ‚ùóÔ∏è</b>"

        if user.selected_language == "uz":
            await message.answer_photo(
                helpCenter,
                messagetext,
            )
            await message.answer(reMessageF)

        elif user.selected_language == "ru":
            await message.answer_photo(
                helpCenter,
                messagetextRu,
            )
            await message.answer(reMessageFRu)

    @bot.message_handler(commands=['mail'])
    async def userAdminMessage(message: types.Message):
        user_id = message.from_user.id
        user = session.query(User).filter_by(user_id=user_id).first()

        user_id = message.from_user.id
        message_text = message.get_args()

        if user.selected_language == "uz":
            if not message_text:
                await message.reply("üí¨ /mail Xabar matnini yuboring")
            else:
                cursor.execute("INSERT INTO messages (user_id, message_text) VALUES (?, ?)", (user_id, message_text))
                conn.commit()
                await message.reply("<b><em>‚úÖ Xabaringiz hodimlarimizga muvoffaqiyatni jo'natildi.</em></b>")

        elif user.selected_language == "ru":
            if not message_text:
                await message.reply("üí¨ /mail –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è")
            else:
                cursor.execute("INSERT INTO messages (user_id, message_text) VALUES (?, ?)", (user_id, message_text))
                conn.commit()
                await message.reply("<b><em>‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞—à–∏–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º.</em></b>")


    @bot.message_handler(commands=['admin'])
    async def admin_command(message: types.Message):
        userName = str(message.chat.first_name)

        if message.from_user.id in admins.values():
            admin_options = [
                [
                    types.InlineKeyboardButton(text="üìä Bot Statitikasi", callback_data="chart"),
                    types.InlineKeyboardButton(text="‚ûï Add Admins", callback_data="add_admins"),
                ],
                [
                    types.InlineKeyboardButton(text="‚úçÔ∏è Bot foydalanuvchilarga xabar yuborish", callback_data="message_admin"),
                ],
                [   
                    types.InlineKeyboardButton(text="üí¨ Foydalanuvchilardan kelgan Xabarlarni o'qish", callback_data="read_add_mess"),
                ],
            ]

            keyboards = types.InlineKeyboardMarkup(inline_keyboard=admin_options)

            await message.answer(
                text=f"<b><em>ü§ñ { botName }</em> ni Xodimlar boshqaruv paneli (v2.1) \n\n‚úã <em>{ userName }, Admin</em> Xush kelibsiz. \n\nMenuni tanlang:</b>",
                reply_markup=keyboards
            )

        else:
            await message.reply(f"‚ùå <em>{ userName }</em> Siz Admin Emassiz ‚ùóÔ∏è")

    @bot.message_handler(text="üîô Back Admin Menu")
    async def admin_command(message: types.Message):
        userName = str(message.chat.first_name)

        if message.from_user.id in admins.values():
            admin_options = [
                [
                    types.InlineKeyboardButton(text="üìä Bot Statitikasi", callback_data="chart"),
                    types.InlineKeyboardButton(text="‚ûï Add Admins", callback_data="add_admins"),
                ],
                [
                    types.InlineKeyboardButton(text="‚úçÔ∏è Bot foydalanuvchilarga xabar yuborish", callback_data="message_admin"),
                ],
                [   
                    types.InlineKeyboardButton(text="üí¨ Foydalanuvchilardan kelgan Xabarlarni o'qish", callback_data="read_add_mess"),
                ],
            ]

            keyboards = types.InlineKeyboardMarkup(inline_keyboard=admin_options)

            await message.answer(
                text=f"<b><em>ü§ñ { botName }</em> ni Xodimlar boshqaruv paneli (v2.1) \n\n‚úã <em>{ userName }, Admin</em> Xush kelibsiz. \n\nMenuni tanlang:</b>",
                reply_markup=keyboards
            )

        else:
            await message.reply(f"‚ùå <em>{ userName }</em> Siz Admin Emassiz ‚ùóÔ∏è")

    @bot.callback_query_handler(lambda callback_query: callback_query.data in ["backhomeadmin"])
    async def admin_command(callback: types.CallbackQuery):
        userName = str(callback.message.chat.first_name)

        admin_options = [
                [
                    types.InlineKeyboardButton(text="üìä Bot Statitikasi", callback_data="chart"),
                    types.InlineKeyboardButton(text="‚ûï Add Admins", callback_data="add_admins"),
                ],
                [
                    types.InlineKeyboardButton(text="‚úçÔ∏è Bot foydalanuvchilarga xabar yuborish", callback_data="message_admin"),
                ],
                [   
                    types.InlineKeyboardButton(text="üí¨ Foydalanuvchilardan kelgan Xabarlarni o'qish", callback_data="add_admins"),
                ],
            ]

        keyboards = types.InlineKeyboardMarkup(inline_keyboard=admin_options)

        await callback.message.answer(
            text=f"<b><em>ü§ñ { botName }</em> ni Xodimlar boshqaruv paneli (v2.1) \n\n‚úã <em>{ userName }, Admin</em> Xush kelibsiz. \n\nMenuni tanlang:</b>",
            reply_markup=keyboards
        )

    @bot.callback_query_handler(lambda callback_query: callback_query.data == 'chart')
    async def chartAdmin(callback_admin_query: types.CallbackQuery):
        if callback_admin_query.from_user.id in admins.values():
            chart_options = [
                        [
                            types.InlineKeyboardButton(text="üî¢ Ja'mi foydalanuvchilar soni", callback_data="totUsers"),
                        ],
                        [
                            types.InlineKeyboardButton(text="üë• So'ngi foydalanuvchilar ro'yhati", callback_data="lastUsers"),
                        ],
                        [
                            types.InlineKeyboardButton(text="üîô Back Admin Menu", callback_data="backhomeadmin"),
                        ]
                    ]

            keyboards = types.InlineKeyboardMarkup(inline_keyboard=chart_options)
        else:
            chart_options = [
                        [
                            types.InlineKeyboardButton(text="üî¢ Ja'mi foydalanuvchilar soni", callback_data="totUsers"),
                        ],
                        [
                            types.InlineKeyboardButton(text="üë• So'ngi foydalanuvchilar ro'yhati", callback_data="lastUsers"),
                        ],
                    ]

            keyboards = types.InlineKeyboardMarkup(inline_keyboard=chart_options)

        await callback_admin_query.message.answer(
            text=f"<b><em>ü§ñ { botName }</em> \n\nMenuni tanlang:</b>",
            reply_markup=keyboards
        )

    @bot.callback_query_handler(lambda callback_query: callback_query.data == 'totUsers')
    async def totUseAdmin(callback_admin_query: types.CallbackQuery):
        total_users = session.query(User).count()
        await callback_admin_query.message.answer(f"<b>{ botName } - ja'mi foydalanuvchilar soni: <em>\"{ total_users }\"</em></b>")

    @bot.callback_query_handler(lambda callback_query: callback_query.data == 'lastUsers')
    async def lasUseAdmin(callback_admin_query: types.CallbackQuery):
        last_20_users = session.query(User.username, User.firstname).order_by(User.id.desc()).limit(35).all()

        response = f"<b>{ botName } - Eng so'nggi 35 ta foydalanuvchilar: \n\n</b>"
        for user in last_20_users:
            response += f"@{user.username} {user.firstname}\n"

        await callback_admin_query.message.answer(response)

    @bot.callback_query_handler(lambda callback_query: callback_query.data == 'add_admins')
    async def addAdmins(callback_data: types.CallbackQuery):
        userName = callback_data.from_user.first_name
        user_id = callback_data.from_user.id

        back_options = [
                    [
                        types.InlineKeyboardButton(text="üîô Back Admin Menu", callback_data="backhomeadmin"),
                    ]
                ]

        keyboards = types.InlineKeyboardMarkup(inline_keyboard=back_options)
        
        if user_id in admins.values():
            await callback_data.message.answer(
                text=f"<b><em>``ü§ñ Hi Germany Bot ni Xodimlar boshqaruv paneli (v2.1)``</em> - uchun Admin (l3) qo'shmoqchisiz. \n\n‚ùóÔ∏è (Muhim). { userName } siz Admin qo'shish orqali botning 80% boshqaruvini Adminga topshirasiz.</b>"
            )
            await callback_data.message.answer(
                text=f"<b><em>{ userName } Adminlik boshqaruv ruhsatnomangiz Admin (l2)</em> \n\nAdmin qo'shish maxsus \"/addadminset admin_id\" kamandasi orqali amalga oshiriladi. \n\n/addadminset kamandasi va shu kamandadan keyin qo'shilmoqchi bo'lgana adminning #user_id kiritiladi. \n\n<em>‚ùóÔ∏è Eslatmalar</em>\n#1./addadminset kamandasi bo'lmasa bot bunday #id ni tasdiqlamaydi. \n#2. /addadminset keyin #raqamlar bo'lishi muhim. \n#3. /addadminset keyin raqamlardan tashqari hech qanday so'z bo'lmasligi kerak \n#4. /addadminset orqali siz admin qo'shishga rozilik bildirasiz.</b>",
                reply_markup=keyboards
            )
        else:
            await callback_data.message.reply(f"‚ùå <em>{ userName }</em> Siz Admin Emassiz ‚ùóÔ∏è")


    @bot.message_handler(commands=['addadminset'])
    async def userAdminMessage(message: types.Message):
        user_id = message.from_user.id
        user = session.query(User).filter_by(user_id=user_id).first()


        user_id = message.from_user.id
        userName = message.from_user.first_name
        admin_id = message.get_args()
        if user_id in admins.values():
            if user.selected_language == "uz":
                if not admin_id:
                    await message.reply("üÜî Main Admin \"/addadminset\" orqali (admin_id) foydalanuvchi identification jo'nating.")
                else:
                    cursor_admins.execute("INSERT INTO admins (user_id, admin_id) VALUES (?, ?)", (user_id, admin_id))
                    conn_admins.commit()
                    await message.reply("<b><em>‚úÖ Admin muvoffaqiyatni qo'shildi.</em></b>")
        else:
            await message.reply(f"‚ùå <em>{ userName }</em> Siz Admin Emassiz ‚ùóÔ∏è")

    # Main
    access_granted = True

    @bot.callback_query_handler(lambda callback_query: callback_query.data == 'message_admin')
    async def addDatas(callback_data: types.CallbackQuery):
        await callback_data.message.answer("<b><em>\"‚úçÔ∏è Bot foydalanuvchilarga xabar yuborish\" - Tez kunlarda ishga tushadi...</em></b>")

    @bot.callback_query_handler(lambda callback_query: callback_query.data == 'read_add_mess')
    async def readMes(callback_data: types.CallbackQuery):
        await callback_data.message.answer("<b><em>\"üí¨ Foydalanuvchilardan kelgan Xabarlarni o'qish\" - Tez kunlarda ishga tushadi...</em></b>")


    async def is_user_admin(admin_id):
        try:
            cursor_admins.execute("SELECT admin_id FROM admins WHERE admin_id = ?", (admin_id,))
            result = cursor_admins.fetchone()
            return result is not None
        except sqlite3.Error as e:
            print(f"Error checking admin status: {e}")
            return False

    @bot.message_handler(commands=['moder'])
    async def modAdmin(message: types.Message):
        admin_id = message.from_user.id
        userName = str(message.chat.first_name)
        
        try:
            if await is_user_admin(admin_id):
                if await is_user_admin(admin_id):
                    admin_options = [
                        [
                            types.InlineKeyboardButton(text="üìä Bot Statitikasi", callback_data="chart"),
                        ],
                        [
                            types.InlineKeyboardButton(text="‚úçÔ∏è Bot foydalanuvchilarga xabar yuborish", callback_data="message_admin"),
                        ],
                        [   
                            types.InlineKeyboardButton(text="üí¨ Foydalanuvchilardan kelgan Xabarlarni o'qish", callback_data="read_add_mess"),
                        ],
                    ]

                    keyboards = types.InlineKeyboardMarkup(inline_keyboard=admin_options)

                    await message.answer(
                        text=f"<b><em>ü§ñ YourBotName</em> ni Xodimlar boshqaruv paneli (v2.1) \n\n‚úã <em>{userName}, Admin</em> Xush kelibsiz. \n\nMenuni tanlang:</b>",
                        reply_markup=keyboards
                    )
                else:
                    await message.reply(f"‚ùå <em>{userName}</em> Siz Admin Emassiz ‚ùóÔ∏è")
            else:
                await message.reply(f"‚ùå <em>{userName}</em> Siz Admin Emassiz ‚ùóÔ∏è")
        except Exception as e:
            print(f"Error handling /moder command: {e}")

    

    @bot.message_handler(lambda message: message.text in ["‚öôÔ∏è Sozlamalar (set)", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (set)"])
    async def setMenu(message: types.Message):
        userData = message.from_user.first_name
        user_id = message.from_user.id
        user = session.query(User).filter_by(user_id=user_id).first()

        setChangeLanBut = InlineKeyboardButton("üîÑ Tilni o'zgartirish / –ò–∑–º–µ–Ω–µ–Ω–∏–µ —è–∑—ã–∫–∞")
        homeExit = InlineKeyboardButton(text="üîô Asosiy menu")
        inline_keyboard = InlineKeyboardMarkup().add(setChangeLanBut, homeExit)
        keyboards = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=1).add(setChangeLanBut, homeExit)

        homeExitRu = InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        inline_keyboard_ru = InlineKeyboardMarkup().add(setChangeLanBut, homeExitRu)
        keyboards_ru = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=1).add(setChangeLanBut, homeExitRu)

        if user.selected_language == "uz":
            await message.answer(
                f"<b>‚öôÔ∏è <em>{ userData }, `Settings`</em> orqali shaxsiy sozlamalaringizni o'zgartirishingiz mumkun !</b>", reply_markup=keyboards
            )
        elif user.selected_language == "ru":
            await message.answer(
                f"<b>‚öôÔ∏è <em>{ userData }, `–ù–∞—Å—Ç—Ä–æ–π–∫–∏`</em> –í—ã –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–∏ –ª–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–µ—Ä–µ–∑ !</b>", reply_markup=keyboards_ru
            )

    
    @bot.message_handler(lambda message: message.text in ["üîô Asosiy menu", "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
    async def exitHome(message: types.Message):
        user_id = message.from_user.id
        user = session.query(User).filter_by(user_id=user_id).first()

        if user.selected_language == "uz":
            await message.answer(
                text="<b>üè† Asosiy menu.</b>",
                reply_markup=keyboards
            )
        elif user.selected_language == "ru":
            await message.answer(
                text="<b>üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.</b>",
                reply_markup=keyboards_ru
            )

    @bot.message_handler(lambda message: message.text in ["‚òéÔ∏è Bog'lanish", "‚òéÔ∏è –°–≤—è–∑—å"])
    async def connectCall(message: types.Message):
        user_id = message.from_user.id
        user = session.query(User).filter_by(user_id=user_id).first()

        cPost = str(
            f"<b>üì≤ { botName }</b> - Xodimlar bilan bog'lanish. \n\nüë§ <em><b>Murojaat uchun: @Mirzakhidov1ch</b></em> \n\n\n <b>üíé @hi_Germany - eng yaxshilarini sizga ulashamiz.</b>"
        )
        cPostRu = str(f"<b>üì≤ { botName }</b> –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º. \n\nüë§ <em><b>–î–ª—è –∞–ø–µ–ª–ª—è—Ü–∏–∏: @Mirzakhidov1ch</b></em> \n\n\n <b>üíé @hi_Germany - –ú—ã —Å–≤—è–∂–µ–º —Å –≤–∞–º–∏ –ª—É—á—à–µ–µ.</b>")
        
        if user.selected_language == "uz":
            await message.answer_photo(
                callCenter,
                cPost
            )
        elif user.selected_language == "ru":
            await message.answer_photo(
                callCenter,
                cPostRu
            )
    @bot.message_handler(commands=['help'])
    async def connectCall(message: types.Message):
        user_id = message.from_user.id
        user = session.query(User).filter_by(user_id=user_id).first()

        cPost = str(
            f"<b>üì≤ { botName }</b> - Xodimlar bilan bog'lanish. \n\nüë§ <em><b>Murojaat uchun: @Mirzakhidov1ch</b></em> \n\n\n <b>üíé @hi_Germany - eng yaxshilarini sizga ulashamiz.</b>"
        )
        cPostRu = str(f"<b>üì≤ { botName }</b> –°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º. \n\nüë§ <em><b>–î–ª—è –∞–ø–µ–ª–ª—è—Ü–∏–∏: @Mirzakhidov1ch</b></em> \n\n\n <b>üíé @hi_Germany - –ú—ã —Å–≤—è–∂–µ–º —Å –≤–∞–º–∏ –ª—É—á—à–µ–µ.")
        
        if user.selected_language == "uz":
            await message.answer_photo(
                callCenter,
                cPost
            )
        elif user.selected_language == "ru":
            await message.answer_photo(
                callCenter,
                cPostRu
            )

    @bot.message_handler(lambda message: message.text in ["üìú Biz haqimizda", "üìú –û –Ω–∞—Å"])
    async def aboutG(message: types.Message):
        user_id = message.from_user.id
        user = session.query(User).filter_by(user_id=user_id).first()

        about = f"<b>{ botName } - <em>Biz sizga üá©üá™ GERMANIYADA #Talim, #Sayohat va Boshqa maqsadlarda Maslahat va Yordam beramiz. \n\nüë§ Murojaat uchun: @Mirzakhidov1ch \n\n\n üíé @hi_Germany - eng yaxshilarini sizga ulashamiz.</em></b>"
        about_ru = f"<b>{ botName } - <em>Biz sizga üá©üá™ –ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º –≤–∞–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∏ –ø–æ–º–æ—â—å –≤ #–û–±—É—á–µ–Ω–∏–∏, #–ü–æ–µ–∑–¥–∫–∞—Ö –∏ –¥—Ä—É–≥–∏—Ö —Ü–µ–ª—è—Ö –≤ –ì–µ—Ä–º–∞–Ω–∏–∏. \n\nüë§ –î–ª—è –∞–ø–µ–ª–ª—è—Ü–∏–∏: @Mirzakhidov1ch \n\n\n üíé @hi_Germany - –ú—ã —Å–≤—è–∂–µ–º —Å –≤–∞–º–∏ –ª—É—á—à–µ–µ.</em></b>" 

        if user.selected_language == "uz":
            await message.answer_photo(
                aboutAP,
                about
            )
        elif user.selected_language == "ru":
            await message.answer_photo(
                aboutAP,
                about_ru
            )
    @bot.message_handler(commands=['about'])
    async def aboutG(message: types.Message):
        user_id = message.from_user.id
        user = session.query(User).filter_by(user_id=user_id).first()

        about = f"<b>{ botName } - <em>Biz sizga üá©üá™ GERMANIYADA #Talim, #Sayohat va Boshqa maqsadlarda Maslahat va Yordam beramiz. \n\nüë§ Murojaat uchun: @Mirzakhidov1ch \n\n\n üíé @hi_Germany - eng yaxshilarini sizga ulashamiz.</em></b>"
        about_ru = f"<b>{ botName } - <em>Biz sizga üá©üá™ –ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏–º –≤–∞–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∏ –ø–æ–º–æ—â—å –≤ #–û–±—É—á–µ–Ω–∏–∏, #–ü–æ–µ–∑–¥–∫–∞—Ö –∏ –¥—Ä—É–≥–∏—Ö —Ü–µ–ª—è—Ö –≤ –ì–µ—Ä–º–∞–Ω–∏–∏. \n\nüë§ –î–ª—è –∞–ø–µ–ª–ª—è—Ü–∏–∏: @Mirzakhidov1ch \n\n\n üíé @hi_Germany - –ú—ã —Å–≤—è–∂–µ–º —Å –≤–∞–º–∏ –ª—É—á—à–µ–µ.</em></b>" 

        if user.selected_language == "uz":
            await message.answer_photo(
                aboutAP,
                about
            )
        elif user.selected_language == "ru":
            await message.answer_photo(
                aboutAP,
                about_ru
            )



    @bot.message_handler(lambda message: message.text in ["üá∫üáø Nemis tilini 0 dan | Uzbek tilida o'rganish", "üá∫üáø –ù–µ–º–µ—Ü–∫–∏–π –æ—Ç 0 | –£—á–µ–±–∞ –Ω–∞ —É–∑–±–µ–∫—Å–∫–æ–º —è–∑—ã–∫–µ"])
    async def on_nu_start(message: types.Message):
        user_id = message.from_user.id
        user = session.query(User).filter_by(user_id=user_id).first()

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=4, one_time_keyboard=True)
        buttons = [button for button in course_nu_data]
        keyboard.add(*buttons)

        if user.selected_language == "uz":
            homeOld = InlineKeyboardButton(text="üîô Orqaga qaytish", callback_data="back_old")
            homeExit = InlineKeyboardButton(text="üîô Asosiy menu",)
            keyboard.add(homeOld, homeExit)
        elif user.selected_language == "ru":
            homeOld = InlineKeyboardButton(text="üîô –û—Ç–≤–∞–ª–∏")
            homeExit = InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            keyboard.add(homeOld, homeExit)

        await message.answer("Select", reply_markup=keyboard)

    @bot.message_handler(lambda message: message.text in course_nu_data)
    async def on_button_nu_click(message: types.Message):
        button_name = message.text
        button_info = course_nu_data[button_name]
        title = button_info["title"]
        address = button_info["address"]
        await message.answer(f"<b><em>{ title }</em></b>")
        await message.answer(f"<b><em>{ address }</em></b>")




    # German Languages


    @bot.message_handler(lambda message: message.text in ["üá©üá™ Nemis tilini 0 dan | Nemis tilida o'rganish", "üá©üá™ –ù–µ–º–µ—Ü–∫–∏–π –æ—Ç 0 | –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º —è–∑—ã–∫–µ"])
    async def on_nn__start(message: types.Message):
        user_id = message.from_user.id
        user = session.query(User).filter_by(user_id=user_id).first()

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=4, one_time_keyboard=True)
        buttons = [button for button in course_nn_data]
        keyboard.add(*buttons)

        if user.selected_language == "uz":
            homeOld = InlineKeyboardButton(text="üîô Orqaga qaytish", callback_data="back_old")
            homeExit = InlineKeyboardButton(text="üîô Asosiy menu",)
            keyboard.add(homeOld, homeExit)
        elif user.selected_language == "ru":
            homeOld = InlineKeyboardButton(text="üîô –û—Ç–≤–∞–ª–∏")
            homeExit = InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            keyboard.add(homeOld, homeExit)

        await message.answer("Select", reply_markup=keyboard)

    @bot.message_handler(lambda message: message.text in course_nn_data)
    async def on_button_nn_click(message: types.Message):
        button_name = message.text
        button_info = course_nn_data[button_name]
        title = button_info["title"]
        address = button_info["address"]
        await message.answer(f"<b><em>{ title }</em></b>")
        await message.answer(f"<b><em>{ address }</em></b>")



    # "Ibrat Farzandlari" cources


    @bot.message_handler(lambda message: message.text in ["üàπ Ibrat Farzandlari", "üàπ –ò–±—Ä–∞—Ç –§–∞—Ä–∑–∞–Ω–¥–ª–∞—Ä–∏"])
    async def on_ib__start(message: types.Message):
        user_id = message.from_user.id
        user = session.query(User).filter_by(user_id=user_id).first()

        keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=4, one_time_keyboard=True)
        buttons = [button for button in course_ib_data]
        keyboard.add(*buttons)

        if user.selected_language == "uz":
            homeOld = InlineKeyboardButton(text="üîô Orqaga qaytish", callback_data="back_old")
            homeExit = InlineKeyboardButton(text="üîô Asosiy menu",)
            keyboard.add(homeOld, homeExit)
        elif user.selected_language == "ru":
            homeOld = InlineKeyboardButton(text="üîô –û—Ç–≤–∞–ª–∏")
            homeExit = InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
            keyboard.add(homeOld, homeExit)

        await message.answer("Select", reply_markup=keyboard)

    @bot.message_handler(lambda message: message.text in course_ib_data)
    async def on_button_ib_click(message: types.Message):
        button_name = message.text
        button_info = course_ib_data[button_name]
        title = button_info["title"]
        address = button_info["address"]
        await message.answer(f"<b><em>{ title }</em></b>")
        await message.answer(f"<b><em>{ address }</em></b>")



    @bot.message_handler(lambda message: message.text in ["üîô Orqaga qaytish", "üîô –û—Ç–≤–∞–ª–∏"])
    async def exitHome(message: types.Message):
        user_id = message.from_user.id
        user = session.query(User).filter_by(user_id=user_id).first()

        cource1 = InlineKeyboardButton(text="üá∫üáø Nemis tilini 0 dan | Uzbek tilida o'rganish")
        cource2 = InlineKeyboardButton(text="üá©üá™ Nemis tilini 0 dan | Nemis tilida o'rganish")
        cource3 = InlineKeyboardButton(text="üàπ Ibrat Farzandlari")
        cource4 = InlineKeyboardButton(text="üè´ Darsliklar (Maktab darsliklari)")
        homeExit = InlineKeyboardButton(text="üîô Asosiy menu")
        course_buttons = InlineKeyboardMarkup().add(cource1, cource2, cource3, cource4, homeExit)

        keyboards = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=1).add(cource1,
                                    cource2, cource3, cource4, homeExit)
        
        cource1_ru = InlineKeyboardButton(text="üá∫üáø –ù–µ–º–µ—Ü–∫–∏–π –æ—Ç 0 | –£—á–µ–±–∞ –Ω–∞ —É–∑–±–µ–∫—Å–∫–æ–º —è–∑—ã–∫–µ")
        cource2_ru = InlineKeyboardButton(text="üá©üá™ –ù–µ–º–µ—Ü–∫–∏–π –æ—Ç 0 | –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º —è–∑—ã–∫–µ")
        cource3_ru = InlineKeyboardButton(text="üàπ –ò–±—Ä–∞—Ç –§–∞—Ä–∑–∞–Ω–¥–ª–∞—Ä–∏")
        cource4_ru = InlineKeyboardButton(text="üè´ –£—á–µ–±–Ω–∏–∫–∏ (–®–∫–æ–ª—å–Ω—ã–µ —É—á–µ–±–Ω–∏–∫–∏)")
        homeExit = InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_home")
        course_buttons_ru = InlineKeyboardMarkup().add(cource1_ru, cource2_ru, cource3_ru, cource4_ru,
                                                    homeExit)

        keyboards_ru = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=1).add(cource1_ru,
                                    cource2_ru, cource3_ru, cource4_ru, homeExit)

        if user.selected_language == "uz":
            await message.answer(
                text="<b>üìö Kurslar (new)</b>",
                reply_markup=keyboards
            )
        elif user.selected_language == "ru":
            await message.answer(
                text="<b>üìö –ö—É—Ä—Å—ã (–Ω–æ–≤—ã–µ)</b>",
                reply_markup=keyboards_ru
            )

        
    
    

    @bot.message_handler(lambda message: message.text in ["üè´ Darsliklar (Maktab darsliklari)", "üè´ –£—á–µ–±–Ω–∏–∫–∏ (–®–∫–æ–ª—å–Ω—ã–µ —É—á–µ–±–Ω–∏–∫–∏)"])
    async def courceLes(message: types.Message):
        user_id = message.from_user.id
        user = session.query(User).filter_by(user_id=user_id).first()

        coLess1 = InlineKeyboardButton(text="üìî 1-sinf")
        coLess2 = InlineKeyboardButton(text="üìì 2-sinf")
        coLess3 = InlineKeyboardButton(text="üìï 3-sinf")
        coLess4 = InlineKeyboardButton(text="üìò 4-5-sinflar")
        coLess5 = InlineKeyboardButton(text="üìô 6-7-sinflar")
        coLess6 = InlineKeyboardButton(text="üìí 8-9-sinflar")
        coLess7 = InlineKeyboardButton(text="üìó 10-11-sinflar")
        backMenu = InlineKeyboardButton(text="üîô Orqaga qaytish")
        homeExit = InlineKeyboardButton(text="üîô Asosiy menu", callback_data="back_home")
        eyboard_inline = InlineKeyboardMarkup().add(coLess1, coLess2, coLess3, coLess4, coLess5, coLess6, coLess7)
        keyboards = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=2).add(coLess1,
                                coLess2, coLess3, coLess4, coLess5, coLess6, coLess7)
        keyboards.add(backMenu, homeExit)

        coLess1_ru = InlineKeyboardButton(text="üìî 1-–∫–ª–∞—Å—Å")
        coLess2_ru = InlineKeyboardButton(text="üìì 2-–∫–ª–∞—Å—Å")
        coLess3_ru = InlineKeyboardButton(text="üìï 3-–∫–ª–∞—Å—Å")
        coLess4_ru = InlineKeyboardButton(text="üìò 4-5-–∫–ª–∞—Å—Å—ã")
        coLess5_ru = InlineKeyboardButton(text="üìô 6-7-–∫–ª–∞—Å—Å—ã")
        coLess6_ru = InlineKeyboardButton(text="üìí 8-9-–∫–ª–∞—Å—Å—ã")
        coLess7_ru = InlineKeyboardButton(text="üìó 10-11-–∫–ª–∞—Å—Å—ã")
        backMenu_ru = InlineKeyboardButton(text="üîô –û—Ç–≤–∞–ª–∏")
        homeExit_ru = InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_home")
        eyboard_inline_ru = InlineKeyboardMarkup().add(coLess1_ru, coLess2_ru, coLess3_ru, coLess4_ru, coLess5_ru, coLess6_ru, coLess7_ru)
        keyboards_ru = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=2).add(coLess1_ru,
                                coLess2_ru, coLess3_ru, coLess4_ru, coLess5_ru, coLess6_ru, coLess7_ru)
        keyboards_ru.add(backMenu_ru, homeExit_ru)

        if user.selected_language == "uz":
            await message.answer_photo(
                schoolCouses,
                f"<b><em>üè´ Darsliklar (Maktab darsliklari)</em> \n\nüìö{ botName } - ning barcha Maktab darsliklari</b> \n\nüî† Biror bir sinfni tanlang:",
                reply_markup=keyboards
            )
        elif user.selected_language == "ru":
            await message.answer_photo(
                schoolCouses,
                f"<b><em>üè´ –£—á–µ–±–Ω–∏–∫–∏ (–®–∫–æ–ª—å–Ω—ã–µ —É—á–µ–±–Ω–∏–∫–∏)</em> \n\nüìö{ botName } - –í—Å–µ —à–∫–æ–ª—å–Ω—ã–µ —É—á–µ–±–Ω–∏–∫–∏</b> \n\nüî† –í—ã–±–∏—Ä–∞–π—Ç–µ –ª—é–±–æ–π –∫–ª–∞—Å—Å:",
                reply_markup=keyboards_ru
            )


    
    @bot.message_handler(lambda message: message.text in ["üìî 1-sinf", "üìî 1-–∫–ª–∞—Å—Å"])
    async def courceLes1(message: types.Message):
        user_id = message.from_user.id
        user = session.query(User).filter_by(user_id=user_id).first()

        file_path1 = './BasicMediaFiles/lsOne/1-sinf Fabuli Schulerbuch.pdf'
        file_path2 = './BasicMediaFiles/lsOne/1-sinf Fabuli_Arbeitsbuch.pdf'
        file_path3 = './BasicMediaFiles/lsOne/Fabuli_LHB_pages 1-49.pdf'
        if user.selected_language == "uz":
            caption = 'üìÇ Fayl jo\'natilmoqda... \n\n<em>Iltimos biroz kuting.</em>'
            caption_end = "‚úÖ Barcha fayllar yuklandi."
        elif user.selected_language == "ru":
            caption = 'üìÇ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞... \n\n<em>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.</em>'
            caption_end = "‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã."
        
        with open(file_path1, 'rb') as file:
            msg = await message.answer(caption)
            await bot.bot.send_document(message.chat.id, file)
        with open(file_path2, 'rb') as file:
            msg = await message.answer(caption)
            await bot.bot.send_document(message.chat.id, file)
        with open(file_path3, 'rb') as file:
            msg = await message.answer(caption)
            await bot.bot.send_document(message.chat.id, file, caption=caption_end)
    
    @bot.message_handler(lambda message: message.text in ["üìì 2-sinf", "üìì 2-–∫–ª–∞—Å—Å"])
    async def courceLes1(message: types.Message):
        user_id = message.from_user.id
        user = session.query(User).filter_by(user_id=user_id).first()

        file_path1 = './BasicMediaFiles/lsTwo/2-sinf Wo ist Paula_Arbeitsbuch_1_bez titul.pdf'
        file_path2 = './BasicMediaFiles/lsTwo/2-sinf Wo ist Paula_Kursbuch_1__compressed.pdf'
        file_path3 = './BasicMediaFiles/lsTwo/Wo ist Paula_LHB_1_2.pdf'
        if user.selected_language == "uz":
            caption = 'üìÇ Fayl jo\'natilmoqda... \n\n<em>Iltimos biroz kuting.</em>'
            caption_end = "‚úÖ Barcha fayllar yuklandi."
        elif user.selected_language == "ru":
            caption = 'üìÇ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞... \n\n<em>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.</em>'
            caption_end = "‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã."
            
        with open(file_path1, 'rb') as file:
            msg = await message.answer(caption)
            await bot.bot.send_document(message.chat.id, file)
        with open(file_path2, 'rb') as file:
            msg = await message.answer(caption)
            await bot.bot.send_document(message.chat.id, file)
        with open(file_path3, 'rb') as file:
            msg = await message.answer(caption)
            await bot.bot.send_document(message.chat.id, file, caption="‚úÖ Barcha fayllar yuklandi.")

    @bot.message_handler(lambda message: message.text in ["üìï 3-sinf", "üìï 3-–∫–ª–∞—Å—Å"])
    async def courceLes1(message: types.Message):
        user_id = message.from_user.id
        user = session.query(User).filter_by(user_id=user_id).first()

        file_path1 = './BasicMediaFiles/lsThree/3-sinf Wo ist Paula_2_√úbungsbuch.pdf'
        if user.selected_language == "uz":
            caption = 'üìÇ Fayl jo\'natilmoqda... \n\n<em>Iltimos biroz kuting.</em>'
            caption_end = "‚úÖ Barcha fayllar yuklandi."
        elif user.selected_language == "ru":
            caption = 'üìÇ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞... \n\n<em>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.</em>'
            caption_end = "‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã."

        with open(file_path1, 'rb') as file:
            msg = await message.answer(caption)
            await bot.bot.send_document(message.chat.id, file, caption="‚úÖ Barcha fayllar yuklandi.")

    @bot.message_handler(lambda message: message.text in ["üìò 4-5-sinflar", "üìò 4-5-–∫–ª–∞—Å—Å—ã"])
    async def courceLes1(message: types.Message):
        user_id = message.from_user.id
        user = session.query(User).filter_by(user_id=user_id).first()

        file_path1 = './BasicMediaFiles/lsFour/4-5 - sinflar Deutschprofis_1_Arbeitsbuch.pdf'
        file_path2 = './BasicMediaFiles/lsFour/4-5 - sinflar Deutschprofis_1_Kursbuch.pdf'
        file_path3 = './BasicMediaFiles/lsFour/4-5 - sinflar Deutschprofis_1_Testheft.pdf'
        file_path4 = './BasicMediaFiles/lsFour/Die Deutschprofis A1 Lehrerhandbuch.pdf'
        if user.selected_language == "uz":
            caption = 'üìÇ Fayl jo\'natilmoqda... \n\n<em>Iltimos biroz kuting.</em>'
            caption_end = "‚úÖ Barcha fayllar yuklandi."
        elif user.selected_language == "ru":
            caption = 'üìÇ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞... \n\n<em>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.</em>'
            caption_end = "‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã."

        with open(file_path1, 'rb') as file:
            msg = await message.answer(caption)
            await bot.bot.send_document(message.chat.id, file)
        with open(file_path2, 'rb') as file:
            msg = await message.answer(caption)
            await bot.bot.send_document(message.chat.id, file)
        with open(file_path3, 'rb') as file:
            msg = await message.answer(caption)
            await bot.bot.send_document(message.chat.id, file)
        with open(file_path4, 'rb') as file:
            msg = await message.answer(caption)
            await bot.bot.send_document(message.chat.id, file, caption="‚úÖ Barcha fayllar yuklandi.")

    @bot.message_handler(lambda message: message.text in ["üìô 6-7-sinflar", "üìô 6-7-–∫–ª–∞—Å—Å—ã"])
    async def courceLes1(message: types.Message):
        user_id = message.from_user.id
        user = session.query(User).filter_by(user_id=user_id).first()

        file_path1 = './BasicMediaFiles/lsFive/6-7 - sinflar Die Deutschprofis A2 Kursbuch.pdf'
        file_path2 = './BasicMediaFiles/lsFive/6-7 - sinflar Die Deutschprofis A2 √úbungsbuch.pdf'
        file_path3 = './BasicMediaFiles/lsFive/Die Deutschprofis A2 Lehrerhandbuch.pdf'
        if user.selected_language == "uz":
            caption = 'üìÇ Fayl jo\'natilmoqda... \n\n<em>Iltimos biroz kuting.</em>'
            caption_end = "‚úÖ Barcha fayllar yuklandi."
        elif user.selected_language == "ru":
            caption = 'üìÇ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞... \n\n<em>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.</em>'
            caption_end = "‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã."

        with open(file_path1, 'rb') as file:
            msg = await message.answer(caption)
            await bot.bot.send_document(message.chat.id, file)
        with open(file_path2, 'rb') as file:
            msg = await message.answer(caption)
            await bot.bot.send_document(message.chat.id, file)
        with open(file_path3, 'rb') as file:
            msg = await message.answer(caption)
            await bot.bot.send_document(message.chat.id, file, caption="‚úÖ Barcha fayllar yuklandi.")

    @bot.message_handler(lambda message: message.text in ["üìí 8-9-sinflar", "üìí 8-9-–∫–ª–∞—Å—Å—ã"])
    async def courceLes1(message: types.Message):
        user_id = message.from_user.id
        user = session.query(User).filter_by(user_id=user_id).first()

        file_path1 = './BasicMediaFiles/lsSix/8-9 - sinflar Die Deutschprofis B1 Kursbuch.pdf'
        file_path2 = './BasicMediaFiles/lsSix/8-9 - sinflar Die Deutschprofis B1 √úbungsbuch.pdf'
        file_path3 = './BasicMediaFiles/lsSix/Die Deutschprofis B1 Lehrerhandbuch.pdf'
        if user.selected_language == "uz":
            caption = 'üìÇ Fayl jo\'natilmoqda... \n\n<em>Iltimos biroz kuting.</em>'
            caption_end = "‚úÖ Barcha fayllar yuklandi."
        elif user.selected_language == "ru":
            caption = 'üìÇ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞... \n\n<em>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.</em>'
            caption_end = "‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã."

        with open(file_path1, 'rb') as file:
            msg = await message.answer(caption)
            await bot.bot.send_document(message.chat.id, file)
        with open(file_path2, 'rb') as file:
            msg = await message.answer(caption)
            await bot.bot.send_document(message.chat.id, file)
        with open(file_path3, 'rb') as file:
            msg = await message.answer(caption)
            await bot.bot.send_document(message.chat.id, file, caption="‚úÖ Barcha fayllar yuklandi.")

    @bot.message_handler(lambda message: message.text in ["üìó 10-11-sinflar", "üìó 10-11-–∫–ª–∞—Å—Å—ã"])
    async def courceLes1(message: types.Message):
        user_id = message.from_user.id
        user = session.query(User).filter_by(user_id=user_id).first()

        file_path1 = './BasicMediaFiles/lsSeven/10-11 - sinflar Aspekte Junior B1+ Kursbuch.pdf'
        file_path2 = './BasicMediaFiles/lsSeven/10-11 - sinflar Aspekte Junior B1+ √úbungsbuch.pdf'
        file_path3 = './BasicMediaFiles/lsSeven/sol3e_preint_cumulative_test_units_1-9_b.pdf'
        file_path4 = './BasicMediaFiles/lsSeven/sol3e_preint_cumulative_test_units_6-9_a.pdf'
        file_path5 = './BasicMediaFiles/lsSeven/sol3e_preint_cumulative_test_units_6-9_b.pdf'
        if user.selected_language == "uz":
            caption = 'üìÇ Fayl jo\'natilmoqda... \n\n<em>Iltimos biroz kuting.</em>'
            caption_end = "‚úÖ Barcha fayllar yuklandi."
        elif user.selected_language == "ru":
            caption = 'üìÇ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞... \n\n<em>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.</em>'
            caption_end = "‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã."

        with open(file_path1, 'rb') as file:
            msg = await message.answer(caption)
            await bot.bot.send_document(message.chat.id, file)
        with open(file_path2, 'rb') as file:
            msg = await message.answer(caption)
            await bot.bot.send_document(message.chat.id, file)
        with open(file_path3, 'rb') as file:
            msg = await message.answer(caption)
            await bot.bot.send_document(message.chat.id, file)
        with open(file_path4, 'rb') as file:
            msg = await message.answer(caption)
            await bot.bot.send_document(message.chat.id, file)
        with open(file_path5, 'rb') as file:
            msg = await message.answer(caption)
            await bot.bot.send_document(message.chat.id, file, caption="‚úÖ Barcha fayllar yuklandi.")

        




    
    @bot.message_handler(lambda message: message.text in ["üíé Foydali Ma'lumotlar (new)", "üíé –ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (new)"])
    async def usefullData(message: types.Message):
        user_id = message.from_user.id
        user = session.query(User).filter_by(user_id=user_id).first()

        useP1 = InlineKeyboardButton(text="üá©üá™ Germaniya davlati, sharoitlari va boshqalar...")
        useP2 = InlineKeyboardButton(text="üá©üá™ Germaniya ta'limi, testlari va va boshqalar...")
        homeExit = InlineKeyboardButton(text="üîô Asosiy menu", callback_data="back_home")
        eyboard_inline = InlineKeyboardMarkup().add(useP1, useP2, homeExit)
        keyboards = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=1).add(useP1,
                                            useP2, homeExit)
        
        useP1_ru = InlineKeyboardButton(text="üá©üá™ –ù–µ–º–µ—Ü–∫–æ–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ, —É—Å–ª–æ–≤–∏—è –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ...")
        useP2_ru = InlineKeyboardButton(text="üá©üá™ –ù–µ–º–µ—Ü–∫–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, —Ç–µ—Å—Ç—ã –∏ —Ç.–¥...")
        homeExit_ru = InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        eyboard_inline_ru = InlineKeyboardMarkup().add(useP1_ru, useP2_ru, homeExit_ru)
        keyboards_ru = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=1).add(useP1_ru,
                                            useP2_ru, homeExit_ru)
        
        if user.selected_language == "uz":
            await message.answer_photo(
                usefullDatas,
                "<b>üíé Foydali Ma'lumotlar</b> \n\n<b><em>üá©üá™ Germaniya:</em>\n#Haqida\n#Talimi\n#Tibbiyoti\n#Ishlari\nva boshqa ko'plab <em>#Foydali va #Qiziqarli</em> ma'lumotlar.</b> \n\nüî† Biron bir menuni tanlang:",
                reply_markup=keyboards
            )
        elif user.selected_language == "ru":
            await message.answer_photo(
                usefullDatas,
                "<b>üíé –ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b> \n\n<b><em>üá©üá™ –ì–µ—Ä–º–∞–Ω–∏—è:</em>\n#–û–∫–æ–ª–æ\n#–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ\n#–õ–µ–∫–∞—Ä—Å—Ç–≤–æ\n#–ó–∞–≤–æ–¥\n–∏ –º–Ω–æ–≥–∏–µ –¥—Ä—É–≥–∏–µ <em>#–ü–æ–ª–µ–∑–Ω—ã–π va #–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π</em> –¥–∞–Ω–Ω—ã–µ.</b> \n\nüî† –í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±–æ–µ –º–µ–Ω—é:",
                reply_markup=keyboards_ru
            )



    @bot.message_handler(lambda message: message.text in ["üá©üá™ Germaniya davlati, sharoitlari va boshqalar...", "üá©üá™ –ù–µ–º–µ—Ü–∫–æ–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ, —É—Å–ª–æ–≤–∏—è –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ..."])
    async def usefullData1(message: types.Message):
        user_id = message.from_user.id
        user = session.query(User).filter_by(user_id=user_id).first()

        usefull_data = [
                [
                    types.InlineKeyboardButton(text="üìçGERMANIYAGA BORISH TALABLARI", callback_data="uDn1"),
                    types.InlineKeyboardButton(text="‚úÖ AUPAIR HAQIDA TO'LIQ", callback_data="uDn2"),
                ],
                [
                    types.InlineKeyboardButton(text="‚úÖ AUSBILDUNG HAQIDA MA'LUMOT", callback_data="uDn5"),
                    types.InlineKeyboardButton(text="üìû ELCHIXONA EMAILLARI TEL NOMERLARI", callback_data="uDn6"),
                ],
                [
                    types.InlineKeyboardButton(text="üéß BARCHA SOHADA OVOZLI CHAT", callback_data="uDn7"),
                    types.InlineKeyboardButton(text="‚úÖ FSJ HAQIDA MA'LUMOT: FSJ BFD", callback_data="uDn8"),
                ],
                [
                    types.InlineKeyboardButton(text="üü¶ BLAU KARTA (moviy karta) Blaue_karte", callback_data="uDn9"),
                    types.InlineKeyboardButton(text="üë®‚Äçüíª FERIENJOB (Work_and_Travel_in_De)", callback_data="uDn10"),
                ],
                [
                    types.InlineKeyboardButton(text="üè¶ BANKSHOT Bloklangan_hisob_raqam", callback_data="uDn11"),
                    types.InlineKeyboardButton(text="üèò STUDIENKOLLEG # Studienkolleg", callback_data="uDn12"),
                ],
                [
                    types.InlineKeyboardButton(text="üé´ CHIPTA SOTIB OLISH", callback_data="uDn13"),
                    types.InlineKeyboardButton(text="‚úÖ STIPENDIYA XOHLOVCHILAR UCHUN", callback_data="uDn14"),
                ],
                [
                    types.InlineKeyboardButton(text="‚ôæ GERMANIYADA BEPUL BAKALAVR VA MAGISTRATURA √íQISH SHARTLARI", callback_data="uDn15"),
                    types.InlineKeyboardButton(text="‚úÖ GERMANIYADA AUSBILDUNG QILISH", callback_data="uDn16"),
                ],
                [
                    types.InlineKeyboardButton(text="üá∫üáø GERMANIYADA TAN OLINGAN UZB UNIVERSITUTLARI", callback_data="uDn17"),
                    types.InlineKeyboardButton(text="üíâ GERMANIYADA TIBBIYOT SOHASIDA √íQISH VA UZB DAN GERMANIYAGA √íQISHINI K√íCHIRISH", callback_data="uDn18"),
                ],
                [
                    types.InlineKeyboardButton(text="üîé GERMANIYADA IJARAGA UY IZLASH", callback_data="uDn19"),
                    types.InlineKeyboardButton(text="üßë‚Äçüéì GERMANIYADA BACHELOR YOKI MASTER √íQIMOQCHI B√íLGANLARGA", callback_data="uDn20"),
                ],
            ]

        keyboards = types.InlineKeyboardMarkup(inline_keyboard=usefull_data)

        if user.selected_language == "uz":
            await message.answer(
                text="<b><em>üíé Germaniya #borish, #elchixona, #xonadonar, #ishlar va boshqa ko'plab narsalar haqida Qiziqarli va Foydali ma'lumotlar.</em></b>",
                reply_markup=keyboards
            )
        elif user.selected_language == "ru":
            await message.answer(text="üá∑üá∫ –ü–æ–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
            await message.answer(
                text="<b><em>üíé –ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –∏ –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ì–µ—Ä–º–∞–Ω–∏–∏ #–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, #–ø–æ—Å–æ–ª—å—Å—Ç–≤–æ, #–≤–µ–¥–µ–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ —Ö–æ–∑—è–π—Å—Ç–≤–∞, #—Ä–∞–±–æ—Ç–∞ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.</em></b>",
                reply_markup=keyboards
            )


    @bot.callback_query_handler(lambda c: c.data in usefull_data1)
    async def handle_useful_data(callback_query: types.CallbackQuery):
        selected_data = callback_query.data
        if selected_data in usefull_data1:
            response = usefull_data1[selected_data]
            await callback_query.message.answer(f"<b>{ response }</b>")
        else:
            await callback_query.message.answer("Bunday ma'lumot topilmadi.")



    @bot.message_handler(lambda message: message.text in ["üá©üá™ Germaniya ta'limi, testlari va va boshqalar...", "üá©üá™ –ù–µ–º–µ—Ü–∫–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, —Ç–µ—Å—Ç—ã –∏ —Ç.–¥..."])
    async def usefullData2(message: types.Message):
        user_id = message.from_user.id
        user = session.query(User).filter_by(user_id=user_id).first()

        usefull_data = [
                [
                    types.InlineKeyboardButton(text="üè° GERMANIYA UNIVERSITETLARI R√íYXATI:", callback_data="uDn21"),
                    types.InlineKeyboardButton(text="üóÇ TESTDAF HAQIDA MA'LUMOT", callback_data="uDn22"),
                ],
                [
                    types.InlineKeyboardButton(text="üìñ ANTRAG NAMUNA", callback_data="uDn23"),
                    types.InlineKeyboardButton(text="‚ùóÔ∏è GERMANIYA ORZUSIDA ALDANGANLAR: (OGOH BO'LING)", callback_data="uDn24"),
                ], 
                [
                    types.InlineKeyboardButton(text="‚ùì UZB PRAVASINI GERMANIYADA FOYDALANSA B√íLADIMI", callback_data="uDn25"),
                    types.InlineKeyboardButton(text="‚úÖ WEITERBILDUNG", callback_data="uDn26"),
                ],
                [
                    types.InlineKeyboardButton(text="ü¶∑ UZB DA STAMATOLOGIYADA O'QIB GERMANIYADA STAMATOLOG BO'LIB ISHLASH", callback_data="uDn27"),
                    types.InlineKeyboardButton(text="üá©üá™ SPRACHKURS (Til kursi)", callback_data="uDn4"),
                ],
                [
                    types.InlineKeyboardButton(text="üíä GERMANIYADA DAVOLANISH UCHUN NIMALAR QILISH KERAK", callback_data="uDn30"),
                    types.InlineKeyboardButton(text="‚úÖ GERMANIYADA TIBBIY TA'LIM:", callback_data="uDn34"),
                ],
                [
                    types.InlineKeyboardButton(text="‚úÖ GERMANIYADA OLIY TA'LIM OLISH: maktab, kollej, litseyni tamomlab Ger da √≤qish. Studienkolleg", callback_data="uDn31"),
                    types.InlineKeyboardButton(text="üè´ GERMANIYADA BAKALAVRDA O'QISH UCHUN TO'LIQ MA'LUMOT", callback_data="uDn32"),

                ],
                [
                    types.InlineKeyboardButton(text="‚úÖ GERMANIYAGA QARINDOSHLARINI MEHMONGA CHAQIRISH:", callback_data="uDn35"),
                    types.InlineKeyboardButton(text="‚úÖ O'zbekistonda tibbiyot sohasida bakalavrni bitirib, Germaniyada ishlash va mutaxassislikka (LOR, Kardiolog, Kardioxirurg va hkz) erishish haqidagi", callback_data="uDn36"),
                ],
                [
                    types.InlineKeyboardButton(text="‚úÖ O'zbekistonda MEDKOLLEJ ni bitirib Germaniyada ishlash haqida", callback_data="uDn37"),
                    types.InlineKeyboardButton(text="‚úÖ DAAD PORTALI ORQALI TURLI STIPENDIYALARGA HUJJAT TOPSHIRISH:", callback_data="uDn40"),
                ],
                [
                    types.InlineKeyboardButton(text="üá∫üáø UZB DAGI O'QISHINI GERMANIYAGA KO'CHIRISH. (PEREVOD) ", callback_data="uDn38"),
                    types.InlineKeyboardButton(text="üá©üá™ GERMANIYA FUQOROLIGINI OLISH:", callback_data="uDn39"),
                ],
        ]


        keyboards = types.InlineKeyboardMarkup(inline_keyboard=usefull_data)
        if user.selected_language == "uz":
            await message.answer(
                text="<b><em>üíé Germaniya #talim, #universitetlar, #testlaer, #xonadonar, #tibbiyot va boshqa ko'plab narsalar haqida Qiziqarli va Foydali ma'lumotlar.</em></b>",
                reply_markup=keyboards
            )
        elif user.selected_language == "ru":
            await message.answer(text="üá∑üá∫ –ü–æ–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
            await message.answer(
                text="<b><em>üíé –ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –∏ –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ì–µ—Ä–º–∞–Ω–∏–∏ #–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, #—É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã, #testlaer, #–¥–æ–º–æ–≤–æ–¥—Å—Ç–≤–æ, #–º–µ–¥–∏—Ü–∏–Ω–∞ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ.</em></b>",
                reply_markup=keyboards
            )

    @bot.callback_query_handler(lambda c: c.data in usefull_data2)
    async def handle_useful_data(callback_query: types.CallbackQuery):
        selected_data = callback_query.data
        if selected_data in usefull_data2:
            response = usefull_data2[selected_data]
            await callback_query.message.answer(f"<b>{ response }</b>")
        else:
            await callback_query.message.answer("Bunday ma'lumot topilmadi.")





    @bot.message_handler()
    async def kb_answer(message: types.Message):
        user_id = message.from_user.id
        user = session.query(User).filter_by(user_id=user_id).first()

        # Cources List
        cources_message = str(f"<em><b>üîé { botName } - Kurslarimiz bilan tanishishingiz mumkin.</b></em>")

        cource1 = InlineKeyboardButton(text="üá∫üáø Nemis tilini 0 dan | Uzbek tilida o'rganish", callback_data="cource1")
        cource2 = InlineKeyboardButton(text="üá©üá™ Nemis tilini 0 dan | Nemis tilida o'rganish", callback_data="cource2")
        cource3 = InlineKeyboardButton(text="üàπ Ibrat Farzandlari", callback_data="cource3")
        cource4 = InlineKeyboardButton(text="üè´ Darsliklar (Maktab darsliklari)", callback_data="cource4")
        homeExit = InlineKeyboardButton(text="üîô Asosiy menu", callback_data="back_home")
        course_buttons = InlineKeyboardMarkup().add(cource1, cource2, cource3, cource4, homeExit)

        keyboards = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=1).add(cource1,
                                    cource2, cource3, cource4, homeExit)
        

        cources_message_ru = str(f"<em><b>üîé { botName } - –í—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∞—à–∏–º–∏ –∫—É—Ä—Å–∞–º–∏.</b></em>")

        cource1_ru = InlineKeyboardButton(text="üá∫üáø –ù–µ–º–µ—Ü–∫–∏–π –æ—Ç 0 | –£—á–µ–±–∞ –Ω–∞ —É–∑–±–µ–∫—Å–∫–æ–º —è–∑—ã–∫–µ", callback_data="cource1")
        cource2_ru = InlineKeyboardButton(text="üá©üá™ –ù–µ–º–µ—Ü–∫–∏–π –æ—Ç 0 | –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º —è–∑—ã–∫–µ", callback_data="cource2")
        cource3_ru = InlineKeyboardButton(text="üàπ –ò–±—Ä–∞—Ç –§–∞—Ä–∑–∞–Ω–¥–ª–∞—Ä–∏", callback_data="cource3")
        cource4_ru = InlineKeyboardButton(text="üè´ –£—á–µ–±–Ω–∏–∫–∏ (–®–∫–æ–ª—å–Ω—ã–µ —É—á–µ–±–Ω–∏–∫–∏)")
        homeExit = InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        course_buttons_ru = InlineKeyboardMarkup().add(cource1_ru, cource2_ru, cource3_ru, cource4_ru,
                                                    homeExit)

        keyboards_ru = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True, row_width=1).add(cource1_ru,
                                    cource2_ru, cource3_ru, cource4_ru, homeExit)
        
        # Connect

        # Users Data

        # user_id = message.from_user.id
        # username = message.from_user.username
        # firstname = message.from_user.first_name

        # cursor.execute('INSERT OR REPLACE INTO users (user_id, username, firstname) VALUES (?, ?, ?)', (user_id, username, firstname))
        # conn.commit()

        if message.text == 'üìö Kurslar (new)':
            if user.selected_language == "uz":
                await message.reply(
                    cources_message,
                    reply_markup=keyboards
                )
        elif message.text == 'üìö –ö—É—Ä—Å—ã (–Ω–æ–≤—ã–µ)':
            if user.selected_language == "ru":
                await message.reply(
                    cources_message_ru,
                    reply_markup=keyboards_ru
                )
        
        else:
            await message.reply(f"‚ùå { message.chat.first_name }, Mavjud bo'lmaan buyruq kiritdingiz \"{ message.text }\" \nBosha so`z yozing...")


        
    

    # ALl errors
    # All posible errors will pass through here

    @bot.errors_handler(exception = ['BotBlocked', 'TimeoutError', 'TypeError'])
    async def bot_block(update: types.Update, excention: Exception):
        print(f"I think The Bot was blocked by the User { update } { excention }")
        return True

except:
    executor.start_polling(dispatcher=bot, skip_updates=True)



if __name__ == '__main__':
    executor.start_polling(dispatcher=bot, skip_updates=True)